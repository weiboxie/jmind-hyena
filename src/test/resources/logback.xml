<?xml version="1.0" encoding="utf-8"?>

<configuration scan="true" scanPeriod="1 minutes" debug="true"> 
  <!--  获取系统变量，不存在设置默认值 test -->  
  <property name="APP_ENV" value="${APP_ENV:-test}"/>  
  <appender name="Console" class="ch.qos.logback.core.ConsoleAppender"> 
    <encoder> 
      <Pattern>%d{HH:mm:ss} %level [%logger{5}.%M:%L] %msg%n</Pattern> 
    </encoder> 
  </appender>  
  <appender name="File" class="ch.qos.logback.core.rolling.RollingFileAppender"> 
    <rollingPolicy class="ch.qos.logback.core.rolling.TimeBasedRollingPolicy"> 
      <FileNamePattern>/yc/logs/dispatch%d{yyyyMMdd}.log</FileNamePattern>  
      <MaxHistory>10</MaxHistory> 
    </rollingPolicy>  
    <encoder> 
      <Pattern>%d{HH:mm:ss} %level [%logger{5}] %msg%n</Pattern>  
      <charset>utf-8</charset> 
    </encoder> 
  </appender>

 <!-- <appender name="perf4jFile" class="ch.qos.logback.core.rolling.RollingFileAppender">
    <rollingPolicy class="ch.qos.logback.core.rolling.TimeBasedRollingPolicy"> 
      <FileNamePattern>/yc/logs/perf4j%d{yyyyMMdd}.log</FileNamePattern>  
      <MaxHistory>10</MaxHistory> 
    </rollingPolicy>  
    <encoder> 
      <Pattern>%msg%n</Pattern>  
      <charset>utf-8</charset> 
    </encoder> 
  </appender>  
  <appender name="CoalescingStatistics" class="org.perf4j.logback.AsyncCoalescingStatisticsAppender"> 
    <param name="TimeSlice" value="60000"/>  
    <appender-ref ref="perf4jFile"/> 
  </appender>-->


  <appender name="jmind" class="ch.qos.logback.core.rolling.RollingFileAppender"> 
    <rollingPolicy class="ch.qos.logback.core.rolling.TimeBasedRollingPolicy"> 
      <FileNamePattern>/yc/logs/jmind%d{yyyyMMdd}.log</FileNamePattern>  
      <MaxHistory>3</MaxHistory> 
    </rollingPolicy>  
    <encoder> 
      <Pattern>%d{HH:mm:ss} %level %property{nodeIp} [%logger{5}] %msg%n</Pattern>  
      <charset>utf-8</charset> 
    </encoder> 
  </appender>  
  <!-- 异步输出 -->  
  <appender name="RollingFile" class="ch.qos.logback.classic.AsyncAppender"> 
    <!-- 不丢失日志.默认的,如果队列的80%已满,则会丢弃TRACT、DEBUG、INFO级别的日志 -->  
    <discardingThreshold>0</discardingThreshold>  
    <!-- 更改默认的队列的深度,该值会影响性能.默认值为256 -->  
    <queueSize>512</queueSize>  
    <!-- 添加附加的appender,最多只能添加一个 -->  
    <appender-ref ref="File"/> 
  </appender>  
  <!-- 异步输出 -->  
  <appender name="AsyncJmind" class="ch.qos.logback.classic.AsyncAppender"> 
    <!-- 不丢失日志.默认的,如果队列的80%已满,则会丢弃TRACT、DEBUG、INFO级别的日志 -->  
    <discardingThreshold>0</discardingThreshold>  
    <!-- 更改默认的队列的深度,该值会影响性能.默认值为256 -->  
    <queueSize>512</queueSize>  
    <!-- 提取调用者数据的代价是相当昂贵的。为了提升性能，默认情况下，当event被加入到queue时，event关联的调用者数据不会被提取。默认情况下，只有"cheap"的数据，如线程名。 默认flase，此时 方法名，行数等就不能得到了 -->  
    <!--    <IncludeCallerData>true</IncludeCallerData> -->  
    <!-- 添加附加的appender,最多只能添加一个 -->  
    <appender-ref ref="jmind"/> 
  </appender>  


  <!--<logger name="org.perf4j.TimingLogger" level="debug" additivity="false">
    <appender-ref ref="CoalescingStatistics"/> 
  </logger>  -->
  <logger name="jmind" level="debug" additivity="false"> 
    <appender-ref ref="jmind"/>
  </logger>  
  <logger name="com.google.code.yanf4j" level="error" additivity="false"> 
    <appender-ref ref="RollingFile"/> 
  </logger>  
  <logger name="org.apache.zookeeper" level="error" additivity="false"> 
    <appender-ref ref="RollingFile"/> 
  </logger>  
  <root level="warn"> 
    <appender-ref ref="RollingFile"/> 
  </root> 
</configuration>